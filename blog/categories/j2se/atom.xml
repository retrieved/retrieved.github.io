<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: j2se | Strive not to be a success]]></title>
  <link href="http://retrieved.github.io/blog/categories/j2se/atom.xml" rel="self"/>
  <link href="http://retrieved.github.io/"/>
  <updated>2014-08-08T02:25:54+08:00</updated>
  <id>http://retrieved.github.io/</id>
  <author>
    <name><![CDATA[as_ary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Class &amp; Object]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/08/class-and-object/"/>
    <updated>2014-08-08T02:19:23+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/08/class-and-object</id>
    <content type="html"><![CDATA[<p>untuk mengakses data atau atribut yang ada pada kelas tertentu disarankan terlebih dahulu membuat <code>getter</code> dan <code>setter</code>, dengan menggunkaan mettode <code>getter</code> dan <code>setter</code> ini berarti melakukan setelah suatu object sudah kita buat / tercipata. setelah itu bari kita mengakses atau melakukan pengaturan pengaturan nilai data / atribut yang ada dalam object tertentu, yang dimana setter digunakan untuk melakukan pengaturan nilai data / atribut dan untuk mengambil nilai itu kita akan menggunakan yang disebut getter, dengan demikian kita sudah melakukan akses tak langsung pada data / atribut yang dimiliki oleh obeject tertentu itu, pendekatan inilah yang disarankan saat kita melakukan pemograman menggunakan bahasa pemograman java , dan juga saat menggunakan bahasa pemograman <code>OOP</code> lainnya.
Bagaimana jika kita menghendaki supaya pengaturan pengaturan itu bersamaan saat suatu object tercipta.? Untuk melakukan hal itu kita bisa membuat / menggunakan constructor, sebelum itu tau ngga sih apat itu constructor ? “Tau dong :D” constructor adalah suatu metode yang dieksekusi / dijalankan secara otomatis, saat suatu object tercipta dari suatu kelas (class). Menurut konvensi, konstruktor harus memiliki nama yang sama dengan nama kelasnya. Saat membuat constructor kita bisa langsung memberikan parameter didalam constructor karena constructor juga bisa disebut prosedure / method. Berikut contoh sederhananya :
```java class Guitar
public class Gitar{</p>

<pre><code>String warna;
int jumlah_senar;
int jumlah_spool;

//konstruktor 1
public Gitar(){
    super();
}

//konstruktor 2
public Gitar(String warna, int jumlah_senar, int jumlah_spool){

    super();
    this.warna = warna;
    this.jumlah_senar = jumlah_senar;
    this.jumlah_spool = jumlah_spool;
}

public int getJumlah_senar() {
    return jumlah_senar;
}

public void setJumlah_senar(int jumlah_senar) {
    this.jumlah_senar = jumlah_senar;
}

public int getJumlah_spool() {
    return jumlah_spool;
}

public void setJumlah_spool(int jumlah_spool) {
    this.jumlah_spool = jumlah_spool;
}

public String getWarna() {
    return warna;
}

public void setWarna(String warna) {
    this.warna = warna;
}

public int Freet(int freet){
    int jumlahFreet = 0;
    jumlahFreet = jumlahFreet + freet;
    return (jumlahFreet);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memahami Istilah Program]]></title>
    <link href="http://retrieved.github.io/blog/2014/07/22/memahami-istilah-program/"/>
    <updated>2014-07-22T01:35:35+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/07/22/memahami-istilah-program</id>
    <content type="html"><![CDATA[<p>Dalam dunia komputer, <code>Program</code> berarti &ldquo;kumpulan code / pertintah yang berupa baris baris code yang ditujukan kepada komputer untuk melakukan suatu tindakan sesuai yang dikehendaki si penulis program tersebut&rdquo;.
Untuk membuat program yang ditulis oleh seseorang atau bisa disebut dengan <code>source code</code> agar ini bisa dijalankan oleh komputer, diperlukan suatu program lain yang berfungsi untuk menerjemahkan program tersebut kedalam bentuk yang dimengerti oleh komputer. pada bahasa pemograman <code>Java</code> program ini bisa ditulis dengan <code>vi</code> atau <code>notepad</code> atau menggunakan tools seperti <code>eclipse</code>, <code>netbeans</code>, <code>IntellijIDEA</code>, <code>Borland JBuilder</code>,  selanjutnya <code>source code</code> perlu diterjemahkan ke kode yang dinamakan <code>bytecode</code> kode hasil terjemah inilah yang akan dijalankan komputer melalui perantara suatu program khusus yang dikemas dalam <code>Java Runtime Environment</code> (JRE).</p>

<blockquote>
<li>Aktivitas dalam membuat program biasa dinamakan `pemograman` (programing)</li>
<li>Orang yang membuat program disebut pemogram (`programmer`)
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keunggulan Java]]></title>
    <link href="http://retrieved.github.io/blog/2014/07/22/keunggulan-java/"/>
    <updated>2014-07-22T01:22:07+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/07/22/keunggulan-java</id>
    <content type="html"><![CDATA[<p>Java memiliki beberapa keunggulan yang tidak dimiliki oleh bahasa lain. Berdasarkan dokumen resmi dari Sun Microsystem, Java memiliki karakteristik berikut :</p>

<p><code>Sederhana</code> Bahasa pemograman Java menggunakan sintaks mirip dengan C++ namun sintaks pada java telah banyak diperbaiki terutama menghilangkan penggunaan pointer yang rumit dan multiple inheritance. Java juga menggunakan automatic memory allocation dan memory garbage collection.</p>

<p><code>Beoreintasi objek</code> Java menggunakan pemograman beroreitasi objeck yang membuat program dapat dibuat secara  modular dan dapat dipergunakan kembali. Pemograman beoreintasi object memodelkan dunia nyata kedalam object dan melakukan interaksi antar object – object tersebut.
Dapat didistribusikan dengan mudah
Java dibuat untuk membuat aplikasi terdistribusi secara mudah dengan adanya libraries networking yang terintegrasi.</p>

<p><code>Interpreter</code> Program java dijalankan menggunakan interpreter yaitu Java virtual Machine (JVM). Hal ini menyebabkan kode sumber Java yang telah dikompilasi menjadi bytecode Java dapat dijalankan pada platform yang berbeda beda.</p>

<p><code>Robust</code> Java mempunyai reliabilitas yang tinggi. Kompilator pada java mempunyai kemampuan mendeteksi error secara lebih teliti dibandingkan bahasa pemograman lain. Java mempunyai Runtime – Exception handling untuk membantu mengatasi eror pada program.</p>

<p><code>Aman</code> Sebagai bahasa pemograman untuk aplikasi internet dan terdistribusi java memeliki beberapa mekanisme keamanan untuk menjaga aplikasi agar tidak digunakan untuk merusak system computer yang menjalankan aplikasi program tersebut.</p>

<p><code>Arsitekstur Netral</code> Program java bersifat platform independent. Program cukup mempunyai satu buah porsi yang dapat dijalankan pada platform yang berbeda dengan JVM.</p>

<p><code>Portebel</code> Kodes sumber maupun program Java dapat dengan mudah dibawa keplatform yang berbeda – beda tanpa harus di kompilasi ulang.</p>

<p><code>Kinerja</code> Kinerja pada Java sering dikatakan kurang tinggi. Namun kinerja Java dapat ditingkatkan menggunkan kompilasi Java lain seperti buatas inprise, Microsoft, ataupun Symantec yang menggunakan Just in Time Compilers (JIT).</p>

<p><code>Multithreaded</code> Java mempunyai kemampuan untuk membuat suatu program yang dapat melakukan beberapa pekerjaan sekaligus dan simultan (Serentak).</p>

<p><code>Dinamis</code>
Java didesain untuk dapat dijalankan pada lingkungan yang dunamis. Perubahan pada suatu kelas (class) dengan menambahkan property ataupun method dapat dilakukan tanpa menggangu program yang menggunakan kelas tersebut.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fitur-Fitur Java]]></title>
    <link href="http://retrieved.github.io/blog/2014/07/21/fitur-fitur-java/"/>
    <updated>2014-07-21T19:33:45+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/07/21/fitur-fitur-java</id>
    <content type="html"><![CDATA[<p>Java telah mengadopsi fitur-fitur dari bahasa lain yang dianggap memiliki kelebihan, sehingga menjadikannya sebagai bahasa yang  portable, efisien, tangguh dan sederhana. Berikut akan dijelaskan beberapa fitur Java yang membedakannya dengan pemograman  lainnya.</p>

<p><code>Java Virtual Machine (JVM)</code> JVM adalah sebuah mesin maya yang bekerja menyerupai aplikasi pada sebuah mesin nyata. JVM menyediakan spesifikasi peranti keras dan platform dimana konfilasi java terjadi. Spesifikasi inilah yang membuat aplikasi berbasis Java menjadi bebas platform mana pun karena proses kompilasi diselesaikan oleh JVM.
Aplikasi progam Java diciptakan dengan file teks berektensi . Java. Program ini dikompilasi menghasilkan satu berkas bytecode berekstensi .class atau lebih. Bytecode adalah serangkaian instruksi serupa instruksi kode mesin. Perbedaannya adalah kode mesin harus dijalankan pada system computer diman kompilasi ditujukan, sementara bytecode berjalan pada interpreter Java yang tersedia di semua platform system computer dan system operasi.</p>

<p><code>Garbage Collection</code> Garbage Collection adalah sebuah fasilltias pengelolaan memori secara dinamis yang dilakukan oleh bahasa pemograman, termasuk Java, Dengan fasilitisas ini seorang programmer tidak perlu mealokasikan memori sendiri sebagaimana pada pemograman C/C++.Hal ini berarti mengurangi kesalahan programmer, apabila ia lupa mengosongkan blok memori yang dipakai program, maka akan menjadikan penuh. Kondisi ini dikenal dengan Memory leaks.
(Dalam pengertian lain)
GC atau garbage collection adalah penghapusan object yang tidak terpakai secara otomatis.
Kapan GC terjadi : Gc terjadi ketika memori yang digunakan aplikasi melebihi dari batas memory yang ditentukan</p>

<p><code>Code security</code> Code security terimplementasi pada Java melalui penggunaan Java Runtime Evironment (JRE). Setelah Melewati proses Code Security, Barulah kode program java dijalankan. Java menggunakan model pengamanan 3 lapis untuk melindungi sistem dari untrusted Java Code.
<code>Class-Loader</code> menangani pemanggilan kelas Java ke interpreter runtime. Proses ini melakukan pemilihan kelas-kelas yang berasal dari disk local dengan kelas kelas yang berasal dari jaringan. Hal ini dapat melindungi system dari Torajan.
<code>Bytecode Verifer</code> menangani pembacaan bytecode sebelum dijalankan  dan memastikan bytecode memenuhi aturan-aturan bahasa java.
<code>Security Managament</code> menangani keamanan tingkat aplikasi dengan mengendalikan program yang berhak mengakses sumber daya seperti system file, port jaringan, proses eksternal, dan system windowing.</p>

<p><code>Java</code> juga menyediakan beragam teknik pengamanan lain yakni bahasa dirancang untuk mempersulit eksekusi kode perusak. Peniadaan pointer merupakan langkah besar pengamanan. Java tidak mengenal operasi pointer. Ditangan programmer andal, operasi pointer merupakan hal yang luar biasa untuk optimasi dan pembuatan program yang efisien serta mengagumkan. Namun mode ini dapat menjadi petaka di hadapan programmer jahat. Pointer merupakan sarana luas biasa untuk pengaksesan tak diotorisasi. Dengan peniadaan operasi pointer, Java dapat menjadi bahasa yang lebih aman.</p>

<p><code>Java</code> memiliki beberapa pengaman terhadap applet. Untuk mencegah program bertindak mengganggu media penyimpanan, maka applet tidak diperbolehkan melakukan open , read, ataupun write terhadap berkas secara sembarangan. Oleh karena Java applet dapat membuka jendela browser yang baru , maka jendela mempunyai logo java  dan teks identifikasi terhadap jendela yang dibuka. Hal ini mencegah jendela pop-up menipu sebagai permintaan keterangan nama pengguna dan kata sandi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengenal Java]]></title>
    <link href="http://retrieved.github.io/blog/2014/07/21/mengenal-java/"/>
    <updated>2014-07-21T08:58:06+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/07/21/mengenal-java</id>
    <content type="html"><![CDATA[<p>Sebagai bahasa pemograman, Java tidak terlepas dari bahasa lain yang menjadi pendukungnya. Java mengambil fitur – fitur bahasa lain yang dianggap sebagai kelebihan oleh tim proyek Green. Bahasa – bahasa yang berjasa dalam perkembangan java tersebut antara lain :</p>

<p><code>Bahasa C++</code>
Bahasa ini paling berpengaruh terhadap Java, ini dikeranakan basis para tim adalah C++. Pada bahasa C++ diadopsi sintaks, sebagian semantic, dan exceptiop handling.<br></p>

<p><code>Bahasa Pascal</code>
Bahasa ini menyumbangkan prinsip mesin machine, sehingga Java dapat berjalan dalam berbgai platform. Mesin virtual sendiri merupakan rancangan Niklaus Wirth, pencipta Pascal.<br></p>

<p><code>Bahasa SIMULA</code>
Bahasa ini berkembang sekitar tahun 1965-an. Selain C++ bahasa SIMULA juga sangat mempengaruhi Java dalam hal bentukan-bentukan dasar dari pemograman berorientasi objek(OOP).<br></p>

<p><code>Bahasa LISP</code>
Fasilitas garbage Collection dan kemampuan untuk meniru generic list processing  (fasilitas ini jarang digunakan ) di adopsi dari bahasa LISP. Bahasa ini berkembang sekitar tahun 1955-an<br></p>

<p><code>Bahasa Algol</code>
Java meniru struktur kendali yang dimiliki oleh bahasa Algol. Bahasa ini berkembang sekitar tahun 1960-an.<br>
<code>Bahasa Ada</code>
Dari bahasa Ada, Java mengadopsi fitur strongly type dan Exception Handling.<br>
<code>Bahasa Objective C</code>
Dari bahasa ini diambil fasilitas antarmuka.<br></p>

<p><code>Bahasa SmallTalk</code>
Java meniru bahasa ST dalam hal pendekatan single-root class hierarchy (objek adalah satu kesatuan hierarki  pewarisan).<br></p>

<p><code>Bahasa Eiffel</code>
Fasilitas assertion yang dimiliki bahasa Eiffel diadopsi oleh Java dan mulai diterapkan pada sebagian JDK 1.4.<br></p>
]]></content>
  </entry>
  
</feed>
