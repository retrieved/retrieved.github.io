<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: j2se | Strive not to be a success]]></title>
  <link href="http://retrieved.github.io/blog/categories/j2se/atom.xml" rel="self"/>
  <link href="http://retrieved.github.io/"/>
  <updated>2014-08-19T03:34:58+08:00</updated>
  <id>http://retrieved.github.io/</id>
  <author>
    <name><![CDATA[as_ary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Abstract Factory Pattern]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/19/abstract-factory-pattern/"/>
    <updated>2014-08-19T03:32:52+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/19/abstract-factory-pattern</id>
    <content type="html"><![CDATA[<p>abstact factory pattern bekerja disekitar super-factory yang menciptakan factories lain. factory ini juga disebut Factory dari factoris. jenis design pattern ini naungan dari creational pattern. design pattern ini memberikan salah satu cara terbaik untuk membuat sebuah objek. Dalam Abstrak factory pattern sebuah incterface bertanggung jawab untuk menciptakan sebuah factory obyek terkait,
tanpa secara eksplisit menentukan kelas mereka. setiap factory yang dihasilkan dapat memberikan object sesuai dengan Factory Pattern.</p>

<h5>Implementasi</h5>


<p>Kita akan membuat class interface senjata dan sifat senjata dan concrete class implementasi dari class tersebut. dan akan kita lanjutkan membuat class absctract factory sebagai langkah berikutnya. FactoryclasseSenjataFactory dan SifatSenjataFactory didefinisikan dimana setiap factory meng-extends AbstractFactory.
AbstractFactoryPatternDemo, dengan menggunakan class FactoryProducer untuk mendapatkan objek AbstractFactory. ini akan menyampaikan informasi (M16,AK_47, FN_FAL untuk Senjata)ke AbstractFactory untuk mendapatkan jenis objek yang dibutuhkan, begitu juga dengan (FullOtomatis,SemiOtomatis,NonOtomatis untuk SifatSenjata) ke AbstractFactory untuk mendapatkan jenis objek yang dibutuhkan.</p>

<p>mebuat interfaca senjata
```java Senjata.java
public interface Senjata {</p>

<pre><code>void suaraTembak();
</code></pre>

<p>}
<code>
membuat concrete class yang mengimplementasikan interface Senjata
</code>java AK_47.java
public class AK_47 implements Senjata {</p>

<pre><code>public void suaraTembak() {
    System.out.println("deerrreeeetttettr");
}
</code></pre>

<p>}</p>

<p><code>
</code>java FN_FAL.java
public class FN_FAL implements Senjata {</p>

<pre><code>public void suaraTembak() {
    System.out.println("dorrrr dorrrr");
}
</code></pre>

<p>}</p>

<p><code>
</code>java M16.java
public class M16 implements Senjata {</p>

<pre><code>public void suaraTembak() {
    System.out.println("Breeet Brettt");
}
</code></pre>

<p>}</p>

<p><code>
membuat interface SifatSenjata.java
</code>java SifatSenjata.java
public intercafe SifatSenjata {</p>

<pre><code>void jangkauanTembak();
</code></pre>

<p>}</p>

<p><code>
membuat concrete class yang mengimplementasikan interface SifatSenjata
</code>java FullOtomatis.java
public class FullOtomatis implements SifatSenjata {</p>

<pre><code>public void jangkauanTembak() {
    System.out.println("300 M");
}
</code></pre>

<p>}</p>

<p><code>
</code>java SemiOtomatis.java
public class SemiOtomatis implements SifatSenjata {</p>

<pre><code>public void jangkauanTembak() {
    System.out.println("400 M");
}
</code></pre>

<p>}</p>

<p><code>
</code>java NonOtomatis.java
public class NonOtomatis implements SifatSenjata {</p>

<pre><code>public void jangkauanTembak() {
    System.out.println("500 M");
}
</code></pre>

<p>}</p>

<p><code>
membuat Abstract class untuk mendapatkan factories dari Object Senjata dan SifatSenjata
</code>java AbstractFactory.java
public abstract class AbstractFactory {</p>

<pre><code>abstract Senjata getSenjata(String senjata);
abstract SifatSenjata getSifatSenjata(String sifatSenjata);   
</code></pre>

<p>}</p>

<p><code>
Buat kelas Factory meng-extends AbstractFactory untuk menghasilkan obyek dari concrete class berdasarkan
informasi diberikan.
</code>java SenjataFactory.java
public class SenjataFactory extends AbstractFactory {</p>

<pre><code>public Senjata getSenjata(String typeSenjata){
    if(typeSenjata == null){

        return null;
    }

    if(typeSenjata.equalsIgnoreCase("AK_47")){

        return new AK_47();

    }else if(typeSenjata.equalsIgnoreCase("FN_FAL")){

        return new FN_FAL();

    }else if(typeSenjata.equalsIgnoreCase("M16")){

        return new M16();

    }

    return null;
}

public SifatSenjata getSifatSenjata(String sifatSenjata){

        return null;
}  
</code></pre>

<p>}</p>

<p><code>
</code>java SifatSenjataFactory.java
public class SifatSenjataFactory extends AbstractFactory {</p>

<pre><code>public Senjata getSenjata(String typeSenjata){

      return null;
}  

public SifatSenjata getSifatSenjata(String sifatSenjata){
     if(sifatSenjata == null){
    return null;
 }

    if(sifatSenjata.equalsIgnoreCase("SemiOtomatis")){

        return new SemiOtomatis();

    }else if(sifatSenjata.equalsIgnoreCase("NonOtomatis")){

        return new NonOtomatis();

    }else if(sifatSenjata.equalsIgnoreCase("FullOtomatis")){

        return new FullOtomatis();

    }

    return null;
} 
</code></pre>

<p>}</p>

<p><code>
Buat kelas Factory produsen untuk mendapatkan factories dengan mempassing informasi seperti
Senjata atau SifatSenjata.
</code>java FactoryProducer.java
public class FactoryProducer {</p>

<pre><code>public static AbstractFactory getFactory(String choice){
if(choice.equalsIgnoreCase("SENJATA")){
   return new SenjataFactory();
}else if(choice.equalsIgnoreCase("SIFAT_SENJATA")){
   return new SifatSenjataFactory();
}
return null;

}
</code></pre>

<p>}</p>

<p><code>
Gunakan FactoryProducer untuk mendapatkan AbstractFactory untuk mendapatkan factoris dari concrete class dengan
passing informasi seperti jenisnya.
</code>java AbstractFactoryPatternDemo.java</p>

<p>public class AbstractFactoryPatternDemo {</p>

<pre><code>/**
 * @param args the command line arguments
 */
public static void main(String[] args) {
    // TODO code application logic here
    //get senjata factory
    AbstractFactory senjataFactory = FactoryProducer.getFactory("SENJATA");
    //get an object of senjata AK_47
    Senjata senjata1 = senjataFactory.getSenjata("AK_47");
    //call suaraTembak method of Senjata AK_47
    senjata1.suaraTembak();
    ///get an object of senjata FN_FAL
    Senjata senjata2 = senjataFactory.getSenjata("FN_FAL");
    //call suaraTembak method of Senjata FN_FAl
    senjata2.suaraTembak();
    ///get an object of senjata M16
    Senjata senjata3 = senjataFactory.getSenjata("M16");
    //call suaraTembak method of Senjata M16
    senjata3.suaraTembak();
    //get SifatSenjata factory
    AbstractFactory sifatSenjataFactory = FactoryProducer.getFactory("SIFAT_SENJATA");
    //get an object of sifatSenjata FullOtomatis
    SifatSenjata sifatSenjata1 = sifatSenjataFactory.getSifatSenjata("FullOtomatis");
    //call jankauanTembak method of FullOtomatis
    sifatSenjata1.jangkauanTembak();
    //get an object of sifatSenjata SemiOtomatis
    SifatSenjata sifatSenjata2 = sifatSenjataFactory.getSifatSenjata("SemiOtomatis");
    //call jankauanTembak method of SemiOtomatis
    sifatSenjata2.jangkauanTembak();
    //get an object of sifatSenjata NonOtomatis
    SifatSenjata sifatSenjata3 = sifatSenjataFactory.getSifatSenjata("NonOtomatis");
    //call jankauanTembak method of NonOtomatis
    sifatSenjata3.jangkauanTembak();


}
</code></pre>

<p>}</p>

<p>```
virify the output
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run:
</span><span class='line'>deerrreeeetttettr
</span><span class='line'>dorrrr dorrrr
</span><span class='line'>Breeet Brettt
</span><span class='line'>300 M
</span><span class='line'>400 M
</span><span class='line'>500 M
</span><span class='line'>BUILD SUCCESSFUL (total time: 0 seconds)</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Pattern]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/18/factory-pattern/"/>
    <updated>2014-08-18T03:32:28+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/18/factory-pattern</id>
    <content type="html"><![CDATA[<p>factory pattern adalah satu dari banyak digunakan di design pattern java. type desing pattern ini menyediakan satu dari cara terbaik untuk pembuatan object.
Dalam factory pattern, kita membuat objek tanpa menyingkapkan logika penciptaan kepada klien dan merujuk ke objek yang baru dibuat menggunakan interface pada umumnya. Untuk mempertajam visi ups maksudnya mempertajam pemahaman tentang factory patter berikut contoh sederhana implementasinya:</p>

<p>membuat interfaca senjata
```java Senjata.java
public interface Senjata {</p>

<pre><code>void suaraTembak();
</code></pre>

<p>}
<code>
membuat kelas yang mengimplementasikan interface Senjata
</code>java AK_47.java
public class AK_47 implements Senjata {</p>

<pre><code>public void suaraTembak() {
    System.out.println("deerrreeeetttettr");
}
</code></pre>

<p>}</p>

<p><code>
</code>java FN_FAL.java
public class FN_FAL implements Senjata {</p>

<pre><code>public void suaraTembak() {
    System.out.println("dorrrr dorrrr");
}
</code></pre>

<p>}</p>

<p><code>
</code>java M16.java
public class M16 implements Senjata {</p>

<pre><code>public void suaraTembak() {
    System.out.println("Breeet Brettt");
}
</code></pre>

<p>}</p>

<p><code>
Buat factory untuk menghasilkan objek Senjata berdasarkan informasi yang diberikan.
</code>java Tentara.java
public class Tentara {</p>

<pre><code>//menggunakan method getSenjata untuk mendapatkan object dari type Senjata

public Senjata getSenjata(String typeSenjata){
    if(typeSenjata == null){

        return null;
    }

    if(typeSenjata.equalsIgnoreCase("AK_47")){

        return new AK_47();

    }else if(typeSenjata.equalsIgnoreCase("FN_FAL")){

        return new FN_FAL();

    }else if(typeSenjata.equalsIgnoreCase("M16")){

        return new M16();

    }

    return null;
}
</code></pre>

<p>}</p>

<p><code>
gunakan factory untuk mendapatkan object dari Senjata dari passing type sebagai informasi
</code>java Main.java
public class Main {</p>

<pre><code>/**
 * @param args the command line arguments
 */
public static void main(String[] args) {
    // TODO code application logic here

    Tentara tentara = new Tentara();

    //get an object of Circle and call its draw method.
    Senjata senjata1 = tentara.getSenjata("AK_47");
    senjata1.suaraTembak();

    Senjata senjata2 = tentara.getSenjata("FN_FAL");
    senjata2.suaraTembak();

    Senjata senjata3 = tentara.getSenjata("M16");
    senjata3.suaraTembak();

}
</code></pre>

<p>}</p>

<p>```
virify the output
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run:
</span><span class='line'>deerrreeeetttettr
</span><span class='line'>dorrrr dorrrr
</span><span class='line'>Breeet Brettt</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type dari Design Pattern]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/18/type-dari-design-pattern/"/>
    <updated>2014-08-18T02:51:09+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/18/type-dari-design-pattern</id>
    <content type="html"><![CDATA[<p>Dari referensi buku design pattern yang berjudul &ldquo;Elements of Reusable Object Oriented Software&rdquo;,
desing pattern ini dapat di clasifikasin menjadi 3 kategori yaitu creational, structural, and behaviour pattern
sekarang kita bahas 1 persatu :</p>

<h5>Creational pattern</h5>


<p>pada design pattern ini menyediakan cara untuk membuat object yang tidak langsung atau pembuatan object logic dengan tersembunyi, dari pada  me instans object langsung menggunakan operator new.
hal ini memberikan banyak fleksibelitas dalam pembuatan object untuk use case tertentu</p>

<h5>Structural pattern</h5>


<p>design pattern ini memberikan perhatian komposisi class dan object, konsep dari pewarisan (inheritance) yang dimaksud ini  digunakan untuk menulis interface dan menentukan cara untuk menulis object untuk mendapatkan fungsi baru.</p>

<h5>behaviour pattern</h5>


<p>desing pattern ini secara khusus berkaitan dengan kominikasi antar object</p>

<p>referensi : <a href="http://www.tutorialspoint.com/design_pattern/">http://www.tutorialspoint.com/design_pattern/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stack dan Heap Memory di Java]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/10/stack-dan-heap-memory-di-java/"/>
    <updated>2014-08-10T04:47:29+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/10/stack-dan-heap-memory-di-java</id>
    <content type="html"><![CDATA[<p>Tau ngga sih?  “tau dongg” apa itu memori stack dan heap pada java, sebenarnya banyak artikel yang mejelaskan pengertian antara memori stack dan heap, kali ini ane coba kembali menuliskan apa perbedaan kedua memori tersebut, oke saat nya newbie action :D !!</p>

<h5>ruang heap di java :</h5>


<p>Ketika kita mulai meprogram dengan java, system operasi yang kita gunakan aka memeberikan beberapa memori ke JVM, java menggunakan memori ini untuk semua kebutuhan, nah bagian memori yang digunakan JVM inilah yang desebut heap memory, setiapa kali kita membuat object menggunakan operator new maka akan di alokasikan memori dari heap, dan ketika  object selesai digunakan memori kembali ke ruang heap di java</p>

<h5>Ruang stack di java:</h5>


<p>Semua parameter pada method dan local variable akan dialokasikan memori dari stack,  jadi jika mengambalikan nilai primitive (bukan varibel) maka akan dialokasikan memori dari stack,</p>

<blockquote>
Stack space :
<ul>
<li><em>method Main</em></li>
<li><em>Saat menciptakan method tanpa /beserta parameter</em></li>
<li><em>Variable reference yang ada di scope method</em><li>
</ul>
Heap space:
<ul>
<li><em>variable reference milik class</em></li>
<li><em>Saat menciptakan object dengan operator `new` </em></li>
</ul>
</blockquote>


<p>```java ManagemenMemory.java
public class ManagementMemory {</p>

<pre><code>String nama;//instace variabel = Heap space
int id ;//instace variabel = Heap space

public static void main(String[] args){
   ManagementMemory m; //variable referance = stack space
    m = new ManagementMemory();//object ManagementMemory = heap space 

}


public String getNama() {//stack space = function
    return nama;
}

public void setNama(String nama) {//stack space = method and parameter
    this.nama = nama;
}
</code></pre>

<p>}
```
referensi :
<a href="http://javarevisited.blogspot.com/2013/01/difference-between-stack-and-heap-java.html">http://javarevisited.blogspot.com/2013/01/difference-between-stack-and-heap-java.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class &amp; Object]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/08/class-and-object/"/>
    <updated>2014-08-08T02:19:23+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/08/class-and-object</id>
    <content type="html"><![CDATA[<p>untuk mengakses data atau atribut yang ada pada kelas tertentu disarankan terlebih dahulu membuat <code>getter</code> dan <code>setter</code>, dengan menggunkaan mettode <code>getter</code> dan <code>setter</code> ini berarti melakukan setelah suatu object sudah kita buat / tercipata. setelah itu bari kita mengakses atau melakukan pengaturan pengaturan nilai data / atribut yang ada dalam object tertentu, yang dimana setter digunakan untuk melakukan pengaturan nilai data / atribut dan untuk mengambil nilai itu kita akan menggunakan yang disebut getter, dengan demikian kita sudah melakukan akses tak langsung pada data / atribut yang dimiliki oleh obeject tertentu itu, pendekatan inilah yang disarankan saat kita melakukan pemograman menggunakan bahasa pemograman java , dan juga saat menggunakan bahasa pemograman <code>OOP</code> lainnya.
Bagaimana jika kita menghendaki supaya pengaturan pengaturan itu bersamaan saat suatu object tercipta.? Untuk melakukan hal itu kita bisa membuat / menggunakan constructor, sebelum itu tau ngga sih apat itu constructor ? “Tau dong :D” constructor adalah suatu metode yang dieksekusi / dijalankan secara otomatis, saat suatu object tercipta dari suatu kelas (class). Menurut konvensi, konstruktor harus memiliki nama yang sama dengan nama kelasnya. Saat membuat constructor kita bisa langsung memberikan parameter didalam constructor karena constructor juga bisa disebut prosedure / method. Berikut contoh sederhananya :
```java class Guitar
public class Gitar{</p>

<pre><code>String warna;
int jumlah_senar;
int jumlah_spool;

//konstruktor 1
public Gitar(){
    super();
}

//konstruktor 2
public Gitar(String warna, int jumlah_senar, int jumlah_spool){

    super();
    this.warna = warna;
    this.jumlah_senar = jumlah_senar;
    this.jumlah_spool = jumlah_spool;
}

public int getJumlah_senar() {
    return jumlah_senar;
}

public void setJumlah_senar(int jumlah_senar) {
    this.jumlah_senar = jumlah_senar;
}

public int getJumlah_spool() {
    return jumlah_spool;
}

public void setJumlah_spool(int jumlah_spool) {
    this.jumlah_spool = jumlah_spool;
}

public String getWarna() {
    return warna;
}

public void setWarna(String warna) {
    this.warna = warna;
}

public int Freet(int freet){
    int jumlahFreet = 0;
    jumlahFreet = jumlahFreet + freet;
    return (jumlahFreet);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
