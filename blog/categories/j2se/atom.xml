<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: j2se | Strive not to be a success]]></title>
  <link href="http://retrieved.github.io/blog/categories/j2se/atom.xml" rel="self"/>
  <link href="http://retrieved.github.io/"/>
  <updated>2014-08-18T02:56:26+08:00</updated>
  <id>http://retrieved.github.io/</id>
  <author>
    <name><![CDATA[as_ary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Type dari Design Pattern]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/18/type-dari-design-pattern/"/>
    <updated>2014-08-18T02:51:09+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/18/type-dari-design-pattern</id>
    <content type="html"><![CDATA[<p>Dari referensi buku design pattern yang berjudul &ldquo;Elements of Reusable Object Oriented Software&rdquo;,
desing pattern ini dapat di clasifikasin menjadi 3 kategori yaitu creational, structural, and behaviour pattern
sekarang kita bahas 1 persatu :</p>

<h5>Creational pattern</h5>


<p>pada design pattern ini menyediakan cara untuk membuat object yang tidak langsung atau pembuatan object logic dengan tersembunyi, dari pada  me instans object langsung menggunakan operator new.
hal ini memberikan banyak fleksibelitas dalam pembuatan object untuk use case tertentu</p>

<h5>Structural pattern</h5>


<p>design pattern ini memberikan perhatian komposisi class dan object, konsep dari pewarisan (inheritance) yang dimaksud ini  digunakan untuk menulis interface dan menentukan cara untuk menulis object untuk mendapatkan fungsi baru.</p>

<h5>behaviour pattern</h5>


<p>desing pattern ini secara khusus berkaitan dengan kominikasi antar object</p>

<p>referensi : <a href="http://www.tutorialspoint.com/design_pattern/">http://www.tutorialspoint.com/design_pattern/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stack dan Heap Memory di Java]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/10/stack-dan-heap-memory-di-java/"/>
    <updated>2014-08-10T04:47:29+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/10/stack-dan-heap-memory-di-java</id>
    <content type="html"><![CDATA[<p>Tau ngga sih?  “tau dongg” apa itu memori stack dan heap pada java, sebenarnya banyak artikel yang mejelaskan pengertian antara memori stack dan heap, kali ini ane coba kembali menuliskan apa perbedaan kedua memori tersebut, oke saat nya newbie action :D !!</p>

<h5>ruang heap di java :</h5>


<p>Ketika kita mulai meprogram dengan java, system operasi yang kita gunakan aka memeberikan beberapa memori ke JVM, java menggunakan memori ini untuk semua kebutuhan, nah bagian memori yang digunakan JVM inilah yang desebut heap memory, setiapa kali kita membuat object menggunakan operator new maka akan di alokasikan memori dari heap, dan ketika  object selesai digunakan memori kembali ke ruang heap di java</p>

<h5>Ruang stack di java:</h5>


<p>Semua parameter pada method dan local variable akan dialokasikan memori dari stack,  jadi jika mengambalikan nilai primitive (bukan varibel) maka akan dialokasikan memori dari stack,</p>

<blockquote>
Stack space :
<ul>
<li><em>method Main</em></li>
<li><em>Saat menciptakan method tanpa /beserta parameter</em></li>
<li><em>Variable reference yang ada di scope method</em><li>
</ul>
Heap space:
<ul>
<li><em>variable reference milik class</em></li>
<li><em>Saat menciptakan object dengan operator `new` </em></li>
</ul>
</blockquote>


<p>```java ManagemenMemory.java
public class ManagementMemory {</p>

<pre><code>String nama;//instace variabel = Heap space
int id ;//instace variabel = Heap space

public static void main(String[] args){
   ManagementMemory m; //variable referance = stack space
    m = new ManagementMemory();//object ManagementMemory = heap space 

}


public String getNama() {//stack space = function
    return nama;
}

public void setNama(String nama) {//stack space = method and parameter
    this.nama = nama;
}
</code></pre>

<p>}
```
referensi :
<a href="http://javarevisited.blogspot.com/2013/01/difference-between-stack-and-heap-java.html">http://javarevisited.blogspot.com/2013/01/difference-between-stack-and-heap-java.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class &amp; Object]]></title>
    <link href="http://retrieved.github.io/blog/2014/08/08/class-and-object/"/>
    <updated>2014-08-08T02:19:23+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/08/08/class-and-object</id>
    <content type="html"><![CDATA[<p>untuk mengakses data atau atribut yang ada pada kelas tertentu disarankan terlebih dahulu membuat <code>getter</code> dan <code>setter</code>, dengan menggunkaan mettode <code>getter</code> dan <code>setter</code> ini berarti melakukan setelah suatu object sudah kita buat / tercipata. setelah itu bari kita mengakses atau melakukan pengaturan pengaturan nilai data / atribut yang ada dalam object tertentu, yang dimana setter digunakan untuk melakukan pengaturan nilai data / atribut dan untuk mengambil nilai itu kita akan menggunakan yang disebut getter, dengan demikian kita sudah melakukan akses tak langsung pada data / atribut yang dimiliki oleh obeject tertentu itu, pendekatan inilah yang disarankan saat kita melakukan pemograman menggunakan bahasa pemograman java , dan juga saat menggunakan bahasa pemograman <code>OOP</code> lainnya.
Bagaimana jika kita menghendaki supaya pengaturan pengaturan itu bersamaan saat suatu object tercipta.? Untuk melakukan hal itu kita bisa membuat / menggunakan constructor, sebelum itu tau ngga sih apat itu constructor ? “Tau dong :D” constructor adalah suatu metode yang dieksekusi / dijalankan secara otomatis, saat suatu object tercipta dari suatu kelas (class). Menurut konvensi, konstruktor harus memiliki nama yang sama dengan nama kelasnya. Saat membuat constructor kita bisa langsung memberikan parameter didalam constructor karena constructor juga bisa disebut prosedure / method. Berikut contoh sederhananya :
```java class Guitar
public class Gitar{</p>

<pre><code>String warna;
int jumlah_senar;
int jumlah_spool;

//konstruktor 1
public Gitar(){
    super();
}

//konstruktor 2
public Gitar(String warna, int jumlah_senar, int jumlah_spool){

    super();
    this.warna = warna;
    this.jumlah_senar = jumlah_senar;
    this.jumlah_spool = jumlah_spool;
}

public int getJumlah_senar() {
    return jumlah_senar;
}

public void setJumlah_senar(int jumlah_senar) {
    this.jumlah_senar = jumlah_senar;
}

public int getJumlah_spool() {
    return jumlah_spool;
}

public void setJumlah_spool(int jumlah_spool) {
    this.jumlah_spool = jumlah_spool;
}

public String getWarna() {
    return warna;
}

public void setWarna(String warna) {
    this.warna = warna;
}

public int Freet(int freet){
    int jumlahFreet = 0;
    jumlahFreet = jumlahFreet + freet;
    return (jumlahFreet);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memahami Istilah Program]]></title>
    <link href="http://retrieved.github.io/blog/2014/07/22/memahami-istilah-program/"/>
    <updated>2014-07-22T01:35:35+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/07/22/memahami-istilah-program</id>
    <content type="html"><![CDATA[<p>Dalam dunia komputer, <code>Program</code> berarti &ldquo;kumpulan code / pertintah yang berupa baris baris code yang ditujukan kepada komputer untuk melakukan suatu tindakan sesuai yang dikehendaki si penulis program tersebut&rdquo;.
Untuk membuat program yang ditulis oleh seseorang atau bisa disebut dengan <code>source code</code> agar ini bisa dijalankan oleh komputer, diperlukan suatu program lain yang berfungsi untuk menerjemahkan program tersebut kedalam bentuk yang dimengerti oleh komputer. pada bahasa pemograman <code>Java</code> program ini bisa ditulis dengan <code>vi</code> atau <code>notepad</code> atau menggunakan tools seperti <code>eclipse</code>, <code>netbeans</code>, <code>IntellijIDEA</code>, <code>Borland JBuilder</code>,  selanjutnya <code>source code</code> perlu diterjemahkan ke kode yang dinamakan <code>bytecode</code> kode hasil terjemah inilah yang akan dijalankan komputer melalui perantara suatu program khusus yang dikemas dalam <code>Java Runtime Environment</code> (JRE).</p>

<blockquote>
<li>Aktivitas dalam membuat program biasa dinamakan `pemograman` (programing)</li>
<li>Orang yang membuat program disebut pemogram (`programmer`)
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keunggulan Java]]></title>
    <link href="http://retrieved.github.io/blog/2014/07/22/keunggulan-java/"/>
    <updated>2014-07-22T01:22:07+08:00</updated>
    <id>http://retrieved.github.io/blog/2014/07/22/keunggulan-java</id>
    <content type="html"><![CDATA[<p>Java memiliki beberapa keunggulan yang tidak dimiliki oleh bahasa lain. Berdasarkan dokumen resmi dari Sun Microsystem, Java memiliki karakteristik berikut :</p>

<p><code>Sederhana</code> Bahasa pemograman Java menggunakan sintaks mirip dengan C++ namun sintaks pada java telah banyak diperbaiki terutama menghilangkan penggunaan pointer yang rumit dan multiple inheritance. Java juga menggunakan automatic memory allocation dan memory garbage collection.</p>

<p><code>Beoreintasi objek</code> Java menggunakan pemograman beroreitasi objeck yang membuat program dapat dibuat secara  modular dan dapat dipergunakan kembali. Pemograman beoreintasi object memodelkan dunia nyata kedalam object dan melakukan interaksi antar object – object tersebut.
Dapat didistribusikan dengan mudah
Java dibuat untuk membuat aplikasi terdistribusi secara mudah dengan adanya libraries networking yang terintegrasi.</p>

<p><code>Interpreter</code> Program java dijalankan menggunakan interpreter yaitu Java virtual Machine (JVM). Hal ini menyebabkan kode sumber Java yang telah dikompilasi menjadi bytecode Java dapat dijalankan pada platform yang berbeda beda.</p>

<p><code>Robust</code> Java mempunyai reliabilitas yang tinggi. Kompilator pada java mempunyai kemampuan mendeteksi error secara lebih teliti dibandingkan bahasa pemograman lain. Java mempunyai Runtime – Exception handling untuk membantu mengatasi eror pada program.</p>

<p><code>Aman</code> Sebagai bahasa pemograman untuk aplikasi internet dan terdistribusi java memeliki beberapa mekanisme keamanan untuk menjaga aplikasi agar tidak digunakan untuk merusak system computer yang menjalankan aplikasi program tersebut.</p>

<p><code>Arsitekstur Netral</code> Program java bersifat platform independent. Program cukup mempunyai satu buah porsi yang dapat dijalankan pada platform yang berbeda dengan JVM.</p>

<p><code>Portebel</code> Kodes sumber maupun program Java dapat dengan mudah dibawa keplatform yang berbeda – beda tanpa harus di kompilasi ulang.</p>

<p><code>Kinerja</code> Kinerja pada Java sering dikatakan kurang tinggi. Namun kinerja Java dapat ditingkatkan menggunkan kompilasi Java lain seperti buatas inprise, Microsoft, ataupun Symantec yang menggunakan Just in Time Compilers (JIT).</p>

<p><code>Multithreaded</code> Java mempunyai kemampuan untuk membuat suatu program yang dapat melakukan beberapa pekerjaan sekaligus dan simultan (Serentak).</p>

<p><code>Dinamis</code>
Java didesain untuk dapat dijalankan pada lingkungan yang dunamis. Perubahan pada suatu kelas (class) dengan menambahkan property ataupun method dapat dilakukan tanpa menggangu program yang menggunakan kelas tersebut.</p>
]]></content>
  </entry>
  
</feed>
